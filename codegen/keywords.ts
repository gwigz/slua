import path from "node:path";
import { spawn, write } from "bun";
import map from "lodash/map";
import mapValues from "lodash/mapValues";
import pickBy from "lodash/pickBy";
import keywords from "./keywords.json";
import type { Keywords } from "./types";

const SLUA_FOLDER = path.resolve(
	path.join(import.meta.dir, "..", "src", ".vitepress", "slua"),
);

const BIOME_PATH = path.resolve(
	path.join(import.meta.dir, "..", "node_modules", ".bin", "biome"),
);

const CODEGEN_HEADER = `// this file is auto-generated by codegen/keywords.ts
// do not edit directly, edit the codegen script instead!
`;

const GENERATED_FILES = ["globals.ts", "documentation.ts"] as const;

async function formatWithBiome(files: string[]) {
	const biome = spawn({
		cmd: [BIOME_PATH, "check", "--write", ...files],
		stdio: ["ignore", "pipe", "inherit"],
	});

	const code = await biome.exited;

	if (code !== 0) {
		throw new Error(`Biome exited with code ${code}`);
	}
}

async function writeObjectToTsFile(
	object: Record<string, unknown>,
	file: string,
) {
	await write(
		path.join(SLUA_FOLDER, file),
		[
			CODEGEN_HEADER,
			`export default ${JSON.stringify(object, null, "\t")} as const;`,
		].join("\n"),
	);
}

function simplifyArgName(name: string): string {
	const simplified = name.replace(/(?<!^)([A-Z][a-z]+)/g, "_$1").toLowerCase();

	switch (true) {
		case simplified.endsWith("id"):
			return "id";
		case simplified.startsWith("number_of_"):
			return simplified.replace("number_of_", "");
		case simplified.startsWith("http_"):
			return simplified.replace("http_", "");
		case simplified.startsWith("start_"):
			return simplified.replace("start_", "");
		case simplified.startsWith("senders_"):
			return simplified.replace("senders_", "");
		default:
			return simplified;
	}
}

function processGlobals(keywords: Keywords) {
	return mapValues(
		pickBy(keywords.global.props, (value) => value.props),
		(value) => map(value.props, "name"),
	);
}

function processDocumentation(keywords: Keywords) {
	return mapValues(
		pickBy(keywords.global.props, (value) => value.props),
		(value) =>
			mapValues(value.props, (prop) => ({
				desc: prop.desc,
				link: prop.link,
				...(prop.signatures && {
					// TODO: handle multiple signatures
					args: map(prop.signatures[0].args, (arg) => ({
						name: simplifyArgName(arg.name),
						desc: arg.desc,
						type: arg.type,
					})),
					returns: map(prop.signatures[0].result, "type"),
				}),
			})),
	);
}

const globals = processGlobals(keywords);
const documentation = processDocumentation(keywords);

await Promise.all([
	writeObjectToTsFile(globals, GENERATED_FILES[0]),
	writeObjectToTsFile(documentation, GENERATED_FILES[1]),
]);

await formatWithBiome(
	GENERATED_FILES.map((file) => path.join(SLUA_FOLDER, file)),
);
