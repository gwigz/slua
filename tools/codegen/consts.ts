import { writeFile } from 'node:fs/promises';
import { join } from 'node:path';
import keywords from '../../keywords.json';
import type { Keywords } from './utilities/types';

const CODEGEN_HEADER = `-- this file is auto-generated by codegen/consts.ts
-- do not edit directly, edit the codegen script instead!
--# selene: allow(unscoped_variables, unused_variable, incorrect_standard_library_use)
`;

function escapeString(str: string): string {
	return str
		.replace(/\\\\/g, '\\')
		.replace(/\\u([0-9a-fA-F]{4})/g, '\\u{$1}')
		.replace(/\\\n/g, '\\n')
		.replace(/\\\r/g, '\\r')
		.replace(/\\\t/g, '\\t');
}

function formatValue(value: string | number, type?: string): string {
	if (typeof value === 'number') {
		return value.toString();
	}

	if (typeof value === 'string') {
		switch (type) {
			case 'vector': {
				const [x, y, z] = value.slice(1, -1).split(',').map(Number);

				return `vector.create(${x}, ${y}, ${z})`;
			}

			case 'quaternion': {
				// const [x, y, z, w] = value.slice(1, -1).split(",").map(Number);

				return 'nil'; // TODO: implement
			}

			case 'uuid':
				return `uuid("${value}")`;

			default:
				return `"${escapeString(value)}"`;
		}
	}

	return 'nil';
}

function processKeywords(keywords: Keywords) {
	const consts: string[] = [CODEGEN_HEADER];
	const globalProps = keywords.global.props;

	for (const [key, prop] of Object.entries(globalProps)) {
		if (
			prop.value !== undefined &&
			prop.value !== null &&
			typeof prop.type === 'string'
		) {
			consts.push(`${key} = ${formatValue(prop.value, prop.type)}`);
		} else if (prop.props) {
			// iterate over the sub-properties
			for (const [subKey, subProp] of Object.entries(prop.props)) {
				if (
					subProp.value !== undefined &&
					subProp.value !== null &&
					typeof subProp.type === 'string'
				) {
					consts.push(
						`${key}.${subKey} = ${formatValue(subProp.value, subProp.type)}`,
					);
				}
			}
		}
	}

	return consts.join('\n').concat('\n');
}

const consts = processKeywords(keywords);
const outputPath = join(import.meta.dir, 'out', 'consts.luau');

await writeFile(outputPath, consts);

console.log('Generated consts');
console.log([outputPath]);
