import path from 'node:path';
import { write } from 'bun';
import map from 'lodash/map';
import mapValues from 'lodash/mapValues';
import pickBy from 'lodash/pickBy';
import keywords from '../../keywords.json';
import type { Keywords } from './utilities/types';
import { formatWithBiome, simplifyArgName } from './utilities/utilities';

const SLUA_FOLDER = path.resolve(
	path.join(import.meta.dir, '..', 'src', '.vitepress', 'slua'),
);

const CODEGEN_HEADER = `// this file is auto-generated by codegen/keywords.ts
// do not edit directly, edit the codegen script instead!
`;

const GENERATED_FILES = ['globals.ts', 'documentation.ts'] as const;

async function writeObjectToTsFile(
	object: Record<string, unknown>,
	file: string,
) {
	await write(
		path.join(SLUA_FOLDER, file),
		[
			CODEGEN_HEADER,
			`export default ${JSON.stringify(object, null, '\t')} as const;`,
		].join('\n'),
	);
}

function getGlobalNames(keywords: Keywords) {
	return mapValues(
		pickBy(keywords.global.props, (value) => value.props),
		(value) => map(value.props, 'name'),
	);
}

function formatDocumentation(keywords: Keywords) {
	return mapValues(
		pickBy(keywords.global.props, (value) => value.props),
		(value) =>
			mapValues(value.props, (prop) => ({
				desc: prop.desc,
				link: prop.link,
				...(prop.signatures && {
					// TODO: handle multiple signatures
					args: map(prop.signatures[0].args, (arg) => ({
						name: simplifyArgName(arg.name),
						desc: arg.desc,
						type: arg.type,
					})),
					returns: map(prop.signatures[0].result, 'type'),
				}),
			})),
	);
}

const globals = getGlobalNames(keywords);
const documentation = formatDocumentation(keywords);

await Promise.all([
	writeObjectToTsFile(globals, GENERATED_FILES[0]),
	writeObjectToTsFile(documentation, GENERATED_FILES[1]),
]);

await formatWithBiome(
	GENERATED_FILES.map((file) => path.join(SLUA_FOLDER, file)),
);

console.log('Generated files');
console.log(GENERATED_FILES.map((file) => path.join(SLUA_FOLDER, file)));
